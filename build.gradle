plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.spotbugs' version '2.0.0'
    id 'pmd'
    id 'checkstyle'
}

group 'com.levelrin.value'
version '1.0.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                enabled = true
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
            limit {
                enabled = true
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
            limit {
                enabled = true
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
            limit {
                enabled = true
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
            limit {
                enabled = true
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
            limit {
                enabled = true
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport

spotbugs {
    toolVersion = '3.1.12'
    ignoreFailures = false
    effort = 'max'
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

pmd {
    toolVersion = '6.16.0'
    ignoreFailures = false
    ruleSetFiles = files('config/pmd/ruleSet.xml')
    ruleSets = []
}
tasks.withType(Pmd) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

checkstyle {
    toolVersion '8.22'
    ignoreFailures = false
    configFile = file('config/checkstyle/checkstyle.xml')
    configProperties 'checkstyle.header.file': file('config/checkstyle/java.header')
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}
